/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.um.ace.qa.hms.sb.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.um.ace.qa.hms.sb.model.feedback;
import com.um.ace.qa.hms.sb.model.feedbackModel;
import com.um.ace.qa.hms.sb.model.feedbackSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the feedback service. Represents a row in the &quot;hms_feedback&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>feedbackModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link feedbackImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see feedbackImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class feedbackModelImpl
	extends BaseModelImpl<feedback> implements feedbackModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a feedback model instance should use the <code>feedback</code> interface instead.
	 */
	public static final String TABLE_NAME = "hms_feedback";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"roomID", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"roomSize", Types.VARCHAR}, {"images", Types.VARCHAR},
		{"roomNo", Types.BIGINT}, {"roomName", Types.VARCHAR},
		{"facilities", Types.VARCHAR}, {"facilities2", Types.VARCHAR},
		{"facilities3", Types.VARCHAR}, {"facilities4", Types.VARCHAR},
		{"payment", Types.BIGINT}, {"carddetails", Types.BIGINT},
		{"cvv", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("roomID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("roomSize", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("images", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("roomNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("roomName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("facilities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("facilities2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("facilities3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("facilities4", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("payment", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("carddetails", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cvv", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table hms_feedback (uuid_ VARCHAR(75) null,roomID LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,roomSize VARCHAR(75) null,images VARCHAR(75) null,roomNo LONG,roomName VARCHAR(75) null,facilities VARCHAR(75) null,facilities2 VARCHAR(75) null,facilities3 VARCHAR(75) null,facilities4 VARCHAR(75) null,payment LONG,carddetails LONG,cvv LONG)";

	public static final String TABLE_SQL_DROP = "drop table hms_feedback";

	public static final String ORDER_BY_JPQL = " ORDER BY feedback.roomNo ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY hms_feedback.roomNo ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long ROOMNO_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static feedback toModel(feedbackSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		feedback model = new feedbackImpl();

		model.setUuid(soapModel.getUuid());
		model.setRoomID(soapModel.getRoomID());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setRoomSize(soapModel.getRoomSize());
		model.setImages(soapModel.getImages());
		model.setRoomNo(soapModel.getRoomNo());
		model.setRoomName(soapModel.getRoomName());
		model.setFacilities(soapModel.getFacilities());
		model.setFacilities2(soapModel.getFacilities2());
		model.setFacilities3(soapModel.getFacilities3());
		model.setFacilities4(soapModel.getFacilities4());
		model.setPayment(soapModel.getPayment());
		model.setCarddetails(soapModel.getCarddetails());
		model.setCvv(soapModel.getCvv());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<feedback> toModels(feedbackSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<feedback> models = new ArrayList<feedback>(soapModels.length);

		for (feedbackSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public feedbackModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _roomID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRoomID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _roomID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return feedback.class;
	}

	@Override
	public String getModelClassName() {
		return feedback.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<feedback, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<feedback, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<feedback, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((feedback)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<feedback, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<feedback, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(feedback)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<feedback, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<feedback, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<feedback, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<feedback, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<feedback, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<feedback, Object>>();
		Map<String, BiConsumer<feedback, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<feedback, ?>>();

		attributeGetterFunctions.put("uuid", feedback::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<feedback, String>)feedback::setUuid);
		attributeGetterFunctions.put("roomID", feedback::getRoomID);
		attributeSetterBiConsumers.put(
			"roomID", (BiConsumer<feedback, Long>)feedback::setRoomID);
		attributeGetterFunctions.put("groupId", feedback::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<feedback, Long>)feedback::setGroupId);
		attributeGetterFunctions.put("companyId", feedback::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<feedback, Long>)feedback::setCompanyId);
		attributeGetterFunctions.put("userId", feedback::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<feedback, Long>)feedback::setUserId);
		attributeGetterFunctions.put("userName", feedback::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<feedback, String>)feedback::setUserName);
		attributeGetterFunctions.put("createDate", feedback::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<feedback, Date>)feedback::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", feedback::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<feedback, Date>)feedback::setModifiedDate);
		attributeGetterFunctions.put("roomSize", feedback::getRoomSize);
		attributeSetterBiConsumers.put(
			"roomSize", (BiConsumer<feedback, String>)feedback::setRoomSize);
		attributeGetterFunctions.put("images", feedback::getImages);
		attributeSetterBiConsumers.put(
			"images", (BiConsumer<feedback, String>)feedback::setImages);
		attributeGetterFunctions.put("roomNo", feedback::getRoomNo);
		attributeSetterBiConsumers.put(
			"roomNo", (BiConsumer<feedback, Long>)feedback::setRoomNo);
		attributeGetterFunctions.put("roomName", feedback::getRoomName);
		attributeSetterBiConsumers.put(
			"roomName", (BiConsumer<feedback, String>)feedback::setRoomName);
		attributeGetterFunctions.put("facilities", feedback::getFacilities);
		attributeSetterBiConsumers.put(
			"facilities",
			(BiConsumer<feedback, String>)feedback::setFacilities);
		attributeGetterFunctions.put("facilities2", feedback::getFacilities2);
		attributeSetterBiConsumers.put(
			"facilities2",
			(BiConsumer<feedback, String>)feedback::setFacilities2);
		attributeGetterFunctions.put("facilities3", feedback::getFacilities3);
		attributeSetterBiConsumers.put(
			"facilities3",
			(BiConsumer<feedback, String>)feedback::setFacilities3);
		attributeGetterFunctions.put("facilities4", feedback::getFacilities4);
		attributeSetterBiConsumers.put(
			"facilities4",
			(BiConsumer<feedback, String>)feedback::setFacilities4);
		attributeGetterFunctions.put("payment", feedback::getPayment);
		attributeSetterBiConsumers.put(
			"payment", (BiConsumer<feedback, Long>)feedback::setPayment);
		attributeGetterFunctions.put("carddetails", feedback::getCarddetails);
		attributeSetterBiConsumers.put(
			"carddetails",
			(BiConsumer<feedback, Long>)feedback::setCarddetails);
		attributeGetterFunctions.put("cvv", feedback::getCvv);
		attributeSetterBiConsumers.put(
			"cvv", (BiConsumer<feedback, Long>)feedback::setCvv);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getRoomID() {
		return _roomID;
	}

	@Override
	public void setRoomID(long roomID) {
		_roomID = roomID;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getRoomSize() {
		if (_roomSize == null) {
			return "";
		}
		else {
			return _roomSize;
		}
	}

	@Override
	public void setRoomSize(String roomSize) {
		_roomSize = roomSize;
	}

	@JSON
	@Override
	public String getImages() {
		if (_images == null) {
			return "";
		}
		else {
			return _images;
		}
	}

	@Override
	public void setImages(String images) {
		_images = images;
	}

	@JSON
	@Override
	public long getRoomNo() {
		return _roomNo;
	}

	@Override
	public void setRoomNo(long roomNo) {
		_columnBitmask = -1L;

		_roomNo = roomNo;
	}

	@JSON
	@Override
	public String getRoomName() {
		if (_roomName == null) {
			return "";
		}
		else {
			return _roomName;
		}
	}

	@Override
	public void setRoomName(String roomName) {
		_roomName = roomName;
	}

	@JSON
	@Override
	public String getFacilities() {
		if (_facilities == null) {
			return "";
		}
		else {
			return _facilities;
		}
	}

	@Override
	public void setFacilities(String facilities) {
		_facilities = facilities;
	}

	@JSON
	@Override
	public String getFacilities2() {
		if (_facilities2 == null) {
			return "";
		}
		else {
			return _facilities2;
		}
	}

	@Override
	public void setFacilities2(String facilities2) {
		_facilities2 = facilities2;
	}

	@JSON
	@Override
	public String getFacilities3() {
		if (_facilities3 == null) {
			return "";
		}
		else {
			return _facilities3;
		}
	}

	@Override
	public void setFacilities3(String facilities3) {
		_facilities3 = facilities3;
	}

	@JSON
	@Override
	public String getFacilities4() {
		if (_facilities4 == null) {
			return "";
		}
		else {
			return _facilities4;
		}
	}

	@Override
	public void setFacilities4(String facilities4) {
		_facilities4 = facilities4;
	}

	@JSON
	@Override
	public long getPayment() {
		return _payment;
	}

	@Override
	public void setPayment(long payment) {
		_payment = payment;
	}

	@JSON
	@Override
	public long getCarddetails() {
		return _carddetails;
	}

	@Override
	public void setCarddetails(long carddetails) {
		_carddetails = carddetails;
	}

	@JSON
	@Override
	public long getCvv() {
		return _cvv;
	}

	@Override
	public void setCvv(long cvv) {
		_cvv = cvv;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(feedback.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), feedback.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public feedback toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (feedback)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		feedbackImpl feedbackImpl = new feedbackImpl();

		feedbackImpl.setUuid(getUuid());
		feedbackImpl.setRoomID(getRoomID());
		feedbackImpl.setGroupId(getGroupId());
		feedbackImpl.setCompanyId(getCompanyId());
		feedbackImpl.setUserId(getUserId());
		feedbackImpl.setUserName(getUserName());
		feedbackImpl.setCreateDate(getCreateDate());
		feedbackImpl.setModifiedDate(getModifiedDate());
		feedbackImpl.setRoomSize(getRoomSize());
		feedbackImpl.setImages(getImages());
		feedbackImpl.setRoomNo(getRoomNo());
		feedbackImpl.setRoomName(getRoomName());
		feedbackImpl.setFacilities(getFacilities());
		feedbackImpl.setFacilities2(getFacilities2());
		feedbackImpl.setFacilities3(getFacilities3());
		feedbackImpl.setFacilities4(getFacilities4());
		feedbackImpl.setPayment(getPayment());
		feedbackImpl.setCarddetails(getCarddetails());
		feedbackImpl.setCvv(getCvv());

		feedbackImpl.resetOriginalValues();

		return feedbackImpl;
	}

	@Override
	public int compareTo(feedback feedback) {
		int value = 0;

		if (getRoomNo() < feedback.getRoomNo()) {
			value = -1;
		}
		else if (getRoomNo() > feedback.getRoomNo()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof feedback)) {
			return false;
		}

		feedback feedback = (feedback)obj;

		long primaryKey = feedback.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		feedbackModelImpl feedbackModelImpl = this;

		feedbackModelImpl._originalUuid = feedbackModelImpl._uuid;

		feedbackModelImpl._originalGroupId = feedbackModelImpl._groupId;

		feedbackModelImpl._setOriginalGroupId = false;

		feedbackModelImpl._originalCompanyId = feedbackModelImpl._companyId;

		feedbackModelImpl._setOriginalCompanyId = false;

		feedbackModelImpl._setModifiedDate = false;

		feedbackModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<feedback> toCacheModel() {
		feedbackCacheModel feedbackCacheModel = new feedbackCacheModel();

		feedbackCacheModel.uuid = getUuid();

		String uuid = feedbackCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			feedbackCacheModel.uuid = null;
		}

		feedbackCacheModel.roomID = getRoomID();

		feedbackCacheModel.groupId = getGroupId();

		feedbackCacheModel.companyId = getCompanyId();

		feedbackCacheModel.userId = getUserId();

		feedbackCacheModel.userName = getUserName();

		String userName = feedbackCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			feedbackCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			feedbackCacheModel.createDate = createDate.getTime();
		}
		else {
			feedbackCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			feedbackCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			feedbackCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		feedbackCacheModel.roomSize = getRoomSize();

		String roomSize = feedbackCacheModel.roomSize;

		if ((roomSize != null) && (roomSize.length() == 0)) {
			feedbackCacheModel.roomSize = null;
		}

		feedbackCacheModel.images = getImages();

		String images = feedbackCacheModel.images;

		if ((images != null) && (images.length() == 0)) {
			feedbackCacheModel.images = null;
		}

		feedbackCacheModel.roomNo = getRoomNo();

		feedbackCacheModel.roomName = getRoomName();

		String roomName = feedbackCacheModel.roomName;

		if ((roomName != null) && (roomName.length() == 0)) {
			feedbackCacheModel.roomName = null;
		}

		feedbackCacheModel.facilities = getFacilities();

		String facilities = feedbackCacheModel.facilities;

		if ((facilities != null) && (facilities.length() == 0)) {
			feedbackCacheModel.facilities = null;
		}

		feedbackCacheModel.facilities2 = getFacilities2();

		String facilities2 = feedbackCacheModel.facilities2;

		if ((facilities2 != null) && (facilities2.length() == 0)) {
			feedbackCacheModel.facilities2 = null;
		}

		feedbackCacheModel.facilities3 = getFacilities3();

		String facilities3 = feedbackCacheModel.facilities3;

		if ((facilities3 != null) && (facilities3.length() == 0)) {
			feedbackCacheModel.facilities3 = null;
		}

		feedbackCacheModel.facilities4 = getFacilities4();

		String facilities4 = feedbackCacheModel.facilities4;

		if ((facilities4 != null) && (facilities4.length() == 0)) {
			feedbackCacheModel.facilities4 = null;
		}

		feedbackCacheModel.payment = getPayment();

		feedbackCacheModel.carddetails = getCarddetails();

		feedbackCacheModel.cvv = getCvv();

		return feedbackCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<feedback, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<feedback, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<feedback, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((feedback)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<feedback, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<feedback, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<feedback, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((feedback)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		feedback.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		feedback.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _roomID;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _roomSize;
	private String _images;
	private long _roomNo;
	private String _roomName;
	private String _facilities;
	private String _facilities2;
	private String _facilities3;
	private String _facilities4;
	private long _payment;
	private long _carddetails;
	private long _cvv;
	private long _columnBitmask;
	private feedback _escapedModel;

}