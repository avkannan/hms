/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.um.ace.qa.hms.sb.service.base;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import com.um.ace.qa.hms.sb.model.room_new;
import com.um.ace.qa.hms.sb.service.persistence.customerPersistence;
import com.um.ace.qa.hms.sb.service.persistence.roomBookingPersistence;
import com.um.ace.qa.hms.sb.service.persistence.roomPersistence;
import com.um.ace.qa.hms.sb.service.persistence.room_newPersistence;
import com.um.ace.qa.hms.sb.service.persistence.staffPersistence;
import com.um.ace.qa.hms.sb.service.room_newLocalService;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import org.osgi.annotation.versioning.ProviderType;
import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the room_new local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.um.ace.qa.hms.sb.service.impl.room_newLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.um.ace.qa.hms.sb.service.impl.room_newLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class room_newLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements room_newLocalService, AopService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>room_newLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>com.um.ace.qa.hms.sb.service.room_newLocalServiceUtil</code>.
	 */

	/**
	 * Adds the room_new to the database. Also notifies the appropriate model listeners.
	 *
	 * @param room_new the room_new
	 * @return the room_new that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public room_new addroom_new(room_new room_new) {
		room_new.setNew(true);

		return room_newPersistence.update(room_new);
	}

	/**
	 * Creates a new room_new with the primary key. Does not add the room_new to the database.
	 *
	 * @param roomID the primary key for the new room_new
	 * @return the new room_new
	 */
	@Override
	@Transactional(enabled = false)
	public room_new createroom_new(long roomID) {
		return room_newPersistence.create(roomID);
	}

	/**
	 * Deletes the room_new with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param roomID the primary key of the room_new
	 * @return the room_new that was removed
	 * @throws PortalException if a room_new with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public room_new deleteroom_new(long roomID) throws PortalException {
		return room_newPersistence.remove(roomID);
	}

	/**
	 * Deletes the room_new from the database. Also notifies the appropriate model listeners.
	 *
	 * @param room_new the room_new
	 * @return the room_new that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public room_new deleteroom_new(room_new room_new) {
		return room_newPersistence.remove(room_new);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			room_new.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return room_newPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.um.ace.qa.hms.sb.model.impl.room_newModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return room_newPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.um.ace.qa.hms.sb.model.impl.room_newModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return room_newPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return room_newPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return room_newPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public room_new fetchroom_new(long roomID) {
		return room_newPersistence.fetchByPrimaryKey(roomID);
	}

	/**
	 * Returns the room_new matching the UUID and group.
	 *
	 * @param uuid the room_new's UUID
	 * @param groupId the primary key of the group
	 * @return the matching room_new, or <code>null</code> if a matching room_new could not be found
	 */
	@Override
	public room_new fetchroom_newByUuidAndGroupId(String uuid, long groupId) {
		return room_newPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the room_new with the primary key.
	 *
	 * @param roomID the primary key of the room_new
	 * @return the room_new
	 * @throws PortalException if a room_new with the primary key could not be found
	 */
	@Override
	public room_new getroom_new(long roomID) throws PortalException {
		return room_newPersistence.findByPrimaryKey(roomID);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(room_newLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(room_new.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("roomID");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			room_newLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(room_new.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("roomID");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(room_newLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(room_new.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("roomID");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {

		final ExportActionableDynamicQuery exportActionableDynamicQuery =
			new ExportActionableDynamicQuery() {

				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary =
						portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(
						stagedModelType, modelAdditionCount);

					long modelDeletionCount =
						ExportImportHelperUtil.getModelDeletionCount(
							portletDataContext, stagedModelType);

					manifestSummary.addModelDeletionCount(
						stagedModelType, modelDeletionCount);

					return modelAdditionCount;
				}

			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(
			new ActionableDynamicQuery.AddCriteriaMethod() {

				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(
						dynamicQuery, "modifiedDate");
				}

			});

		exportActionableDynamicQuery.setCompanyId(
			portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(
			new ActionableDynamicQuery.PerformActionMethod<room_new>() {

				@Override
				public void performAction(room_new room_new)
					throws PortalException {

					StagedModelDataHandlerUtil.exportStagedModel(
						portletDataContext, room_new);
				}

			});
		exportActionableDynamicQuery.setStagedModelType(
			new StagedModelType(
				PortalUtil.getClassNameId(room_new.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return room_newLocalService.deleteroom_new((room_new)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return room_newPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the room_news matching the UUID and company.
	 *
	 * @param uuid the UUID of the room_news
	 * @param companyId the primary key of the company
	 * @return the matching room_news, or an empty list if no matches were found
	 */
	@Override
	public List<room_new> getroom_newsByUuidAndCompanyId(
		String uuid, long companyId) {

		return room_newPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of room_news matching the UUID and company.
	 *
	 * @param uuid the UUID of the room_news
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of room_news
	 * @param end the upper bound of the range of room_news (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching room_news, or an empty list if no matches were found
	 */
	@Override
	public List<room_new> getroom_newsByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<room_new> orderByComparator) {

		return room_newPersistence.findByUuid_C(
			uuid, companyId, start, end, orderByComparator);
	}

	/**
	 * Returns the room_new matching the UUID and group.
	 *
	 * @param uuid the room_new's UUID
	 * @param groupId the primary key of the group
	 * @return the matching room_new
	 * @throws PortalException if a matching room_new could not be found
	 */
	@Override
	public room_new getroom_newByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {

		return room_newPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the room_news.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.um.ace.qa.hms.sb.model.impl.room_newModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of room_news
	 * @param end the upper bound of the range of room_news (not inclusive)
	 * @return the range of room_news
	 */
	@Override
	public List<room_new> getroom_news(int start, int end) {
		return room_newPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of room_news.
	 *
	 * @return the number of room_news
	 */
	@Override
	public int getroom_newsCount() {
		return room_newPersistence.countAll();
	}

	/**
	 * Updates the room_new in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param room_new the room_new
	 * @return the room_new that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public room_new updateroom_new(room_new room_new) {
		return room_newPersistence.update(room_new);
	}

	@Override
	public Class<?>[] getAopInterfaces() {
		return new Class<?>[] {
			room_newLocalService.class, IdentifiableOSGiService.class,
			PersistedModelLocalService.class
		};
	}

	@Override
	public void setAopProxy(Object aopProxy) {
		room_newLocalService = (room_newLocalService)aopProxy;
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return room_newLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return room_new.class;
	}

	protected String getModelClassName() {
		return room_new.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = room_newPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@Reference
	protected customerPersistence customerPersistence;

	@Reference
	protected roomPersistence roomPersistence;

	protected room_newLocalService room_newLocalService;

	@Reference
	protected room_newPersistence room_newPersistence;

	@Reference
	protected roomBookingPersistence roomBookingPersistence;

	@Reference
	protected staffPersistence staffPersistence;

	@Reference
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

}