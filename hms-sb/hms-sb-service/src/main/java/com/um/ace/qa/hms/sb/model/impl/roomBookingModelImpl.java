/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.um.ace.qa.hms.sb.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.um.ace.qa.hms.sb.model.roomBooking;
import com.um.ace.qa.hms.sb.model.roomBookingModel;
import com.um.ace.qa.hms.sb.model.roomBookingSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the roomBooking service. Represents a row in the &quot;hms_roomBooking&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>roomBookingModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link roomBookingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see roomBookingImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class roomBookingModelImpl
	extends BaseModelImpl<roomBooking> implements roomBookingModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a room booking model instance should use the <code>roomBooking</code> interface instead.
	 */
	public static final String TABLE_NAME = "hms_roomBooking";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"bookingID", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"roomID", Types.BIGINT}, {"customerID", Types.VARCHAR},
		{"bookId", Types.BIGINT}, {"checkoutDate", Types.TIMESTAMP},
		{"duration", Types.BIGINT}, {"checkinDate", Types.TIMESTAMP},
		{"cancelledDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bookingID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("roomID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("customerID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bookId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("checkoutDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("duration", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("checkinDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("cancelledDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table hms_roomBooking (uuid_ VARCHAR(75) null,bookingID LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,roomID LONG,customerID VARCHAR(75) null,bookId LONG,checkoutDate DATE null,duration LONG,checkinDate DATE null,cancelledDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table hms_roomBooking";

	public static final String ORDER_BY_JPQL =
		" ORDER BY roomBooking.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY hms_roomBooking.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static roomBooking toModel(roomBookingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		roomBooking model = new roomBookingImpl();

		model.setUuid(soapModel.getUuid());
		model.setBookingID(soapModel.getBookingID());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setRoomID(soapModel.getRoomID());
		model.setCustomerID(soapModel.getCustomerID());
		model.setBookId(soapModel.getBookId());
		model.setCheckoutDate(soapModel.getCheckoutDate());
		model.setDuration(soapModel.getDuration());
		model.setCheckinDate(soapModel.getCheckinDate());
		model.setCancelledDate(soapModel.getCancelledDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<roomBooking> toModels(roomBookingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<roomBooking> models = new ArrayList<roomBooking>(
			soapModels.length);

		for (roomBookingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public roomBookingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bookingID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBookingID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bookingID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return roomBooking.class;
	}

	@Override
	public String getModelClassName() {
		return roomBooking.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<roomBooking, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<roomBooking, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<roomBooking, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((roomBooking)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<roomBooking, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<roomBooking, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(roomBooking)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<roomBooking, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<roomBooking, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<roomBooking, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<roomBooking, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<roomBooking, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<roomBooking, Object>>();
		Map<String, BiConsumer<roomBooking, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<roomBooking, ?>>();

		attributeGetterFunctions.put("uuid", roomBooking::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<roomBooking, String>)roomBooking::setUuid);
		attributeGetterFunctions.put("bookingID", roomBooking::getBookingID);
		attributeSetterBiConsumers.put(
			"bookingID",
			(BiConsumer<roomBooking, Long>)roomBooking::setBookingID);
		attributeGetterFunctions.put("groupId", roomBooking::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<roomBooking, Long>)roomBooking::setGroupId);
		attributeGetterFunctions.put("companyId", roomBooking::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<roomBooking, Long>)roomBooking::setCompanyId);
		attributeGetterFunctions.put("userId", roomBooking::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<roomBooking, Long>)roomBooking::setUserId);
		attributeGetterFunctions.put("userName", roomBooking::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<roomBooking, String>)roomBooking::setUserName);
		attributeGetterFunctions.put("createDate", roomBooking::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<roomBooking, Date>)roomBooking::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", roomBooking::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<roomBooking, Date>)roomBooking::setModifiedDate);
		attributeGetterFunctions.put("roomID", roomBooking::getRoomID);
		attributeSetterBiConsumers.put(
			"roomID", (BiConsumer<roomBooking, Long>)roomBooking::setRoomID);
		attributeGetterFunctions.put("customerID", roomBooking::getCustomerID);
		attributeSetterBiConsumers.put(
			"customerID",
			(BiConsumer<roomBooking, String>)roomBooking::setCustomerID);
		attributeGetterFunctions.put("bookId", roomBooking::getBookId);
		attributeSetterBiConsumers.put(
			"bookId", (BiConsumer<roomBooking, Long>)roomBooking::setBookId);
		attributeGetterFunctions.put(
			"checkoutDate", roomBooking::getCheckoutDate);
		attributeSetterBiConsumers.put(
			"checkoutDate",
			(BiConsumer<roomBooking, Date>)roomBooking::setCheckoutDate);
		attributeGetterFunctions.put("duration", roomBooking::getDuration);
		attributeSetterBiConsumers.put(
			"duration",
			(BiConsumer<roomBooking, Long>)roomBooking::setDuration);
		attributeGetterFunctions.put(
			"checkinDate", roomBooking::getCheckinDate);
		attributeSetterBiConsumers.put(
			"checkinDate",
			(BiConsumer<roomBooking, Date>)roomBooking::setCheckinDate);
		attributeGetterFunctions.put(
			"cancelledDate", roomBooking::getCancelledDate);
		attributeSetterBiConsumers.put(
			"cancelledDate",
			(BiConsumer<roomBooking, Date>)roomBooking::setCancelledDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getBookingID() {
		return _bookingID;
	}

	@Override
	public void setBookingID(long bookingID) {
		_bookingID = bookingID;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getRoomID() {
		return _roomID;
	}

	@Override
	public void setRoomID(long roomID) {
		_roomID = roomID;
	}

	@JSON
	@Override
	public String getCustomerID() {
		if (_customerID == null) {
			return "";
		}
		else {
			return _customerID;
		}
	}

	@Override
	public void setCustomerID(String customerID) {
		_customerID = customerID;
	}

	@JSON
	@Override
	public long getBookId() {
		return _bookId;
	}

	@Override
	public void setBookId(long bookId) {
		_bookId = bookId;
	}

	@JSON
	@Override
	public Date getCheckoutDate() {
		return _checkoutDate;
	}

	@Override
	public void setCheckoutDate(Date checkoutDate) {
		_checkoutDate = checkoutDate;
	}

	@JSON
	@Override
	public long getDuration() {
		return _duration;
	}

	@Override
	public void setDuration(long duration) {
		_duration = duration;
	}

	@JSON
	@Override
	public Date getCheckinDate() {
		return _checkinDate;
	}

	@Override
	public void setCheckinDate(Date checkinDate) {
		_checkinDate = checkinDate;
	}

	@JSON
	@Override
	public Date getCancelledDate() {
		return _cancelledDate;
	}

	@Override
	public void setCancelledDate(Date cancelledDate) {
		_cancelledDate = cancelledDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(roomBooking.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), roomBooking.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public roomBooking toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (roomBooking)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		roomBookingImpl roomBookingImpl = new roomBookingImpl();

		roomBookingImpl.setUuid(getUuid());
		roomBookingImpl.setBookingID(getBookingID());
		roomBookingImpl.setGroupId(getGroupId());
		roomBookingImpl.setCompanyId(getCompanyId());
		roomBookingImpl.setUserId(getUserId());
		roomBookingImpl.setUserName(getUserName());
		roomBookingImpl.setCreateDate(getCreateDate());
		roomBookingImpl.setModifiedDate(getModifiedDate());
		roomBookingImpl.setRoomID(getRoomID());
		roomBookingImpl.setCustomerID(getCustomerID());
		roomBookingImpl.setBookId(getBookId());
		roomBookingImpl.setCheckoutDate(getCheckoutDate());
		roomBookingImpl.setDuration(getDuration());
		roomBookingImpl.setCheckinDate(getCheckinDate());
		roomBookingImpl.setCancelledDate(getCancelledDate());

		roomBookingImpl.resetOriginalValues();

		return roomBookingImpl;
	}

	@Override
	public int compareTo(roomBooking roomBooking) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), roomBooking.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof roomBooking)) {
			return false;
		}

		roomBooking roomBooking = (roomBooking)obj;

		long primaryKey = roomBooking.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		roomBookingModelImpl roomBookingModelImpl = this;

		roomBookingModelImpl._originalUuid = roomBookingModelImpl._uuid;

		roomBookingModelImpl._originalGroupId = roomBookingModelImpl._groupId;

		roomBookingModelImpl._setOriginalGroupId = false;

		roomBookingModelImpl._originalCompanyId =
			roomBookingModelImpl._companyId;

		roomBookingModelImpl._setOriginalCompanyId = false;

		roomBookingModelImpl._setModifiedDate = false;

		roomBookingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<roomBooking> toCacheModel() {
		roomBookingCacheModel roomBookingCacheModel =
			new roomBookingCacheModel();

		roomBookingCacheModel.uuid = getUuid();

		String uuid = roomBookingCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			roomBookingCacheModel.uuid = null;
		}

		roomBookingCacheModel.bookingID = getBookingID();

		roomBookingCacheModel.groupId = getGroupId();

		roomBookingCacheModel.companyId = getCompanyId();

		roomBookingCacheModel.userId = getUserId();

		roomBookingCacheModel.userName = getUserName();

		String userName = roomBookingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			roomBookingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			roomBookingCacheModel.createDate = createDate.getTime();
		}
		else {
			roomBookingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			roomBookingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			roomBookingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		roomBookingCacheModel.roomID = getRoomID();

		roomBookingCacheModel.customerID = getCustomerID();

		String customerID = roomBookingCacheModel.customerID;

		if ((customerID != null) && (customerID.length() == 0)) {
			roomBookingCacheModel.customerID = null;
		}

		roomBookingCacheModel.bookId = getBookId();

		Date checkoutDate = getCheckoutDate();

		if (checkoutDate != null) {
			roomBookingCacheModel.checkoutDate = checkoutDate.getTime();
		}
		else {
			roomBookingCacheModel.checkoutDate = Long.MIN_VALUE;
		}

		roomBookingCacheModel.duration = getDuration();

		Date checkinDate = getCheckinDate();

		if (checkinDate != null) {
			roomBookingCacheModel.checkinDate = checkinDate.getTime();
		}
		else {
			roomBookingCacheModel.checkinDate = Long.MIN_VALUE;
		}

		Date cancelledDate = getCancelledDate();

		if (cancelledDate != null) {
			roomBookingCacheModel.cancelledDate = cancelledDate.getTime();
		}
		else {
			roomBookingCacheModel.cancelledDate = Long.MIN_VALUE;
		}

		return roomBookingCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<roomBooking, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<roomBooking, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<roomBooking, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((roomBooking)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<roomBooking, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<roomBooking, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<roomBooking, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((roomBooking)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		roomBooking.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		roomBooking.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _bookingID;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _roomID;
	private String _customerID;
	private long _bookId;
	private Date _checkoutDate;
	private long _duration;
	private Date _checkinDate;
	private Date _cancelledDate;
	private long _columnBitmask;
	private roomBooking _escapedModel;

}